//
// build.gradle in TeamCode
//
// Most of the definitions for building your module reside in a common, shared
// file 'build.common.gradle'. Being factored in this way makes it easier to
// integrate updates to the FTC into your code. If you really need to customize
// the build definitions, you can place those customizations in this file, but
// please think carefully as to whether such customizations are really necessary
// before doing so.


// Custom definitions may go here

// Include common definitions from above.
apply from: '../build.common.gradle'
apply from: '../build.dependencies.gradle'

android {

    defaultConfig {
        externalNativeBuild {
            cmake {
                cppFlags ''
            }
        }
    }
    namespace = 'org.firstinspires.ftc.teamcode'
    androidResources {
        noCompress 'tflite'
    }

    packagingOptions {
        jniLibs {
            pickFirsts += ['**/*.so']
        }
        jniLibs.useLegacyPackaging true
    }
    externalNativeBuild {
        cmake {
            path file('src/main/cpp/CMakeLists.txt')
            version '3.18.1'
        }
    }
}

dependencies {
    implementation project(':FtcRobotController')
    annotationProcessor files('lib/OpModeAnnotationProcessor.jar')
}

//////////////////////// Camera Stuff /////////////////////////////
repositories {
    // LibRealSense repo
    maven{
        url "https://egiintel.jfrog.io/artifactory/librealsense"
    }
}

configurations {
    downloadHeader
    downloadSo
}

dependencies {
    implementation project(path: ':ftc265')
    //def version = '2.50.0'
    downloadSo 'com.intel.realsense:librealsense:2.50.0@aar'
    implementation 'com.intel.realsense:librealsense:2.50.0@aar'
    downloadHeader 'com.intel.realsense:librealsense:2.50.0@zip'
}

task extractHeaders(type: Sync) {
    dependsOn configurations.downloadHeader
    from { configurations.downloadHeader.collect { zipTree(it) } }
    into "$projectDir/src/main/cpp/include"
}

task extractSo(type: Sync) {
    dependsOn configurations.downloadSo
    from { configurations.downloadSo.collect { zipTree(it) } }
    include("jni/**")
    into "$buildDir/"
}

preBuild.dependsOn(extractHeaders)
preBuild.dependsOn(extractSo)